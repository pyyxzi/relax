{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"关于","date":"2025-04-16T11:44:10.990Z","updated":"2025-04-16T11:44:10.990Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"战歌起 您的浏览器不支持音频播放器 Star Sky Two Steps From Hell .music-player { background: linear-gradient(45deg, #3a1c71, #d76d77, #ffaf7b); border-radius: 15px; padding: 20px; margin: 20px 0; box-shadow: 0 10px 20px rgba(0,0,0,0.3); position: relative; overflow: hidden; } .music-player::before { content: \"\"; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%); transform: rotate(45deg); z-index: 1; pointer-events: none; } .player-title { color: white; font-size: 1.5em; margin-bottom: 15px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); font-weight: bold; text-align: center; } .custom-audio { width: 100%; height: 50px; outline: none; filter: drop-shadow(0 5px 10px rgba(0,0,0,0.2)); display: flex; justify-content: center; margin: 0 auto; } .custom-audio::-webkit-media-controls-panel { background: rgba(255,255,255,0.2); border-radius: 10px; } .custom-audio::-webkit-media-controls-play-button { background-color: rgba(255,255,255,0.8); border-radius: 50%; transform: scale(1.2); } .custom-audio::-webkit-media-controls-enclosure { display: flex; justify-content: center; align-items: center; } .music-info { display: flex; align-items: center; margin-top: 15px; justify-content: center; } .album-art { width: 60px; height: 60px; border-radius: 50%; margin-right: 15px; box-shadow: 0 5px 10px rgba(0,0,0,0.2); animation: rotate 10s linear infinite; } @keyframes rotate { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } .track-info { color: white; } .track-name { font-weight: bold; font-size: 1.1em; margin-bottom: 5px; } .artist { font-size: 0.9em; opacity: 0.8; } .visualizer { display: flex; justify-content: center; align-items: flex-end; height: 30px; margin-top: 10px; } .bar { width: 5px; background: white; margin: 0 2px; border-radius: 5px; animation: visualize 0.8s infinite alternate; } .bar:nth-child(1) { height: 30%; animation-delay: 0.2s; } .bar:nth-child(2) { height: 60%; animation-delay: 0.3s; } .bar:nth-child(3) { height: 80%; animation-delay: 0.4s; } .bar:nth-child(4) { height: 40%; animation-delay: 0.5s; } .bar:nth-child(5) { height: 70%; animation-delay: 0.6s; } .bar:nth-child(6) { height: 50%; animation-delay: 0.7s; } .bar:nth-child(7) { height: 90%; animation-delay: 0.8s; } .bar:nth-child(8) { height: 30%; animation-delay: 0.9s; } @keyframes visualize { from { transform: scaleY(1); } to { transform: scaleY(1.5); } }"},{"title":"网站公告","date":"2025-03-31T16:00:00.000Z","updated":"2025-04-16T11:46:14.660Z","comments":false,"path":"公告/index.html","permalink":"http://example.com/%E5%85%AC%E5%91%8A/index.html","excerpt":"","text":"2025年01月01日 网站公告 网站创建 网站正式创建！我将在这里分享有趣的东西! 感谢访问，希望我的内容能够对您有所帮助！ /* 公告页面样式 */ .announcement-container { max-width: 800px; margin: 0 auto; padding: 20px; } .announcement-header { text-align: center; margin-bottom: 40px; position: relative; } .announcement-title { font-size: 2rem; color: #3498db; display: inline-block; padding-bottom: 10px; position: relative; } .announcement-title:after { content: \"\"; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 3px; background: linear-gradient(90deg, #3498db, #9b59b6); border-radius: 3px; } .announcement-icon { font-size: 2.5rem; color: #3498db; margin-bottom: 15px; display: block; } .announcement-item { margin-bottom: 40px; padding: 25px; border-radius: 15px; background: white; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; border-left: 5px solid #3498db; } .announcement-item:hover { transform: translateY(-5px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1); } .announcement-meta { display: flex; justify-content: space-between; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; } .announcement-date { color: #7f8c8d; font-size: 0.9rem; } .announcement-tag { background: #3498db; color: white; padding: 3px 10px; border-radius: 20px; font-size: 0.8rem; } .announcement-item:nth-child(3) .announcement-tag { background: #9b59b6; } .announcement-item:nth-child(4) .announcement-tag { background: #e74c3c; } .announcement-item:nth-child(5) .announcement-tag { background: #2ecc71; } .announcement-content h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.4rem; } .announcement-content p { color: #34495e; line-height: 1.7; margin-bottom: 15px; } .announcement-content ul { padding-left: 20px; margin-bottom: 15px; } .announcement-content ul li { color: #34495e; margin-bottom: 8px; position: relative; } .announcement-content ul li:before { content: \"•\"; color: #3498db; font-weight: bold; display: inline-block; width: 1em; margin-left: -1em; } @media (max-width: 768px) { .announcement-meta { flex-direction: column; } .announcement-date { margin-bottom: 10px; } .announcement-tag { align-self: flex-start; } }"},{"title":"游戏","date":"2025-04-15T16:38:19.000Z","updated":"2025-04-16T13:31:37.096Z","comments":false,"path":"game/index.html","permalink":"http://example.com/game/index.html","excerpt":"在线玩游戏！","text":"游戏乐园 放松心情，享受游戏的乐趣 ⚫⚪ 五子棋 经典黑白对弈，五子相连定胜负 开始游戏 ♞♜ 中国象棋 千年国粹，运筹帷幄决胜千里 开始游戏 🎲 魔方 挑战大脑，还原六面立方体 开始游戏 🐉 召唤神龙 集齐七颗龙珠，实现你的愿望 开始游戏 🏃 神庙逃亡 快速奔跑，躲避障碍物，考验反应力 开始游戏 📌 见缝插针 精准投掷，把握时机，挑战你的眼力 开始游戏 🧱 我的世界2D版 像素风格的沙盒游戏，创造属于你的世界 开始游戏 🐔 坤乐盒 鲲鲲同款，只因你太美 开始游戏 🌀 走迷宫 考验智力与耐心，找到迷宫的出口 开始游戏 🎹 钢琴块 节奏游戏，点击黑块，享受音乐 开始游戏 /* 全局动画效果 */ @keyframes float { 0% { transform: translateY(0px); } 50% { transform: translateY(-10px); } 100% { transform: translateY(0px); } } @keyframes pulse { 0% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } 50% { transform: scale(1.03); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); } 100% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } } /* 卡片悬停效果 */ .game-card:hover { transform: translateY(-10px); box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4); } .game-card:hover .play-btn { transform: scale(1.05); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } /* 添加霓虹光效果 */ .game-card:hover::before { content: \"\"; position: absolute; top: -3px; left: -3px; right: -3px; bottom: -3px; z-index: -1; background: linear-gradient(45deg, #ff3e9d, #0071ff, #00ff9d, #ff3e9d); background-size: 400% 400%; border-radius: 16px; animation: neon 3s ease infinite; } @keyframes neon { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } /* 背景动画 */ .header-decoration { animation: float 6s ease-in-out infinite; } window.addEventListener('load', function() { // 添加鼠标跟随效果 const gameContainer = document.querySelector('.game-container'); if (gameContainer) { gameContainer.addEventListener('mousemove', function(e) { const cards = document.querySelectorAll('.game-card'); const mouseX = e.clientX; const mouseY = e.clientY; cards.forEach(card => { const rect = card.getBoundingClientRect(); const cardX = rect.left + rect.width / 2; const cardY = rect.top + rect.height / 2; // 计算鼠标与卡片的距离 const distX = mouseX - cardX; const distY = mouseY - cardY; const distance = Math.sqrt(distX * distX + distY * distY); // 近距离时添加轻微的3D倾斜效果 if (distance < 300) { const rotateY = distX * 0.03; const rotateX = -distY * 0.03; card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`; } else { card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)'; } }); }); // 鼠标离开时重置所有卡片 gameContainer.addEventListener('mouseleave', function() { const cards = document.querySelectorAll('.game-card'); cards.forEach(card => { card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)'; }); }); } });","author":"吴彦祖"},{"title":"放映厅","date":"2025-04-16T13:36:02.000Z","updated":"2025-04-16T16:33:03.231Z","comments":false,"path":"放映厅/index.html","permalink":"http://example.com/%E6%94%BE%E6%98%A0%E5%8E%85/index.html","excerpt":"","text":"🎬 沙子坑影院 🎲 随机震撼体验 🏃 1号厅：箱根驿传，风驰电掣 ▼ 1 2 3 4 5 🌏 2号厅：异域风情，彼岸之息 ▼ 1 2 3 ⚔️ 3号厅：超燃战斗，电光石火 ▼ 1 2 3 /* 动画效果 */ @keyframes glow { 0% { box-shadow: 0 0 15px rgba(255, 255, 255, 0.3); } 50% { box-shadow: 0 0 30px rgba(255, 255, 255, 0.5); } 100% { box-shadow: 0 0 15px rgba(255, 255, 255, 0.3); } } @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } } @keyframes slideDown { from { opacity: 0; transform: translateY(-20px); } to { opacity: 1; transform: translateY(0); } } @keyframes float { 0% { transform: translateY(0px); } 50% { transform: translateY(-10px); } 100% { transform: translateY(0px); } } .theater-section { transition: all 0.4s ease; position: relative; overflow: hidden; } .theater-section::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(45deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%); pointer-events: none; } .theater-section:hover { transform: translateY(-10px); box-shadow: 0 20px 50px rgba(0, 0, 0, 0.8); } .random-button button { position: relative; overflow: hidden; } .random-button button::after { content: ''; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%); opacity: 0; pointer-events: none; transition: opacity 0.5s ease; } .random-button button:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(255, 77, 141, 0.7); animation: pulse 1.5s infinite; } .random-button button:hover::after { opacity: 1; animation: float 3s infinite ease-in-out; } .theater-header { transition: all 0.3s ease; position: relative; overflow: hidden; } .theater-header::after { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%); transition: all 0.6s ease; pointer-events: none; } .theater-header:hover { filter: brightness(1.3); } .theater-header:hover::after { left: 100%; } .toggle-icon { transition: transform 0.3s ease; } .theater-header.active .toggle-icon { transform: rotate(180deg); } .theater-content { animation: slideDown 0.5s ease forwards; } .control-button:hover { background: rgba(255,255,255,0.4) !important; transform: scale(1.1); } /* 响应式设计 */ @media (max-width: 992px) { .cinema-container { padding: 20px; } .cinema-header h1 { font-size: 2.5em; } .theater-content iframe { height: 500px; } .theater-header h2 { font-size: 1.5em; } } @media (max-width: 768px) { .cinema-container { padding: 15px; } .cinema-header h1 { font-size: 2em; } .theater-content iframe { height: 350px; } .theater-control { position: relative !important; top: 0 !important; right: 0 !important; margin-bottom: 15px; justify-content: center; } .theater-header h2 { font-size: 1.2em; } .theater-header h2 span { width: 36px !important; height: 36px !important; } } // 视频BV号列表 const hakoneVideos = [ 'BV1Wwd9YqE1i', // 箱根驿传1 'BV1NBwVeGEyJ', // 箱根驿传2 'BV14D4y1F7cg', // 箱根驿传3 'BV1b5411z7vC', // 箱根驿传4 'BV1Kb421Y7vb' // 箱根驿传5 ]; const exoticVideos = [ 'BV1pK411u7y6', // 异域风情1 'BV1gM4y117zU', // 异域风情2 'BV1Yp4y1W7u3' // 异域风情3 ]; const battleVideos = [ 'BV1wx411e71v', // 超燃战斗1 'BV1Qs411e7SN', // 超燃战斗2 'BV1Em4y1H7To' // 超燃战斗3 ]; // 所有视频的集合，用于随机播放 const allVideos = [...hakoneVideos, ...exoticVideos, ...battleVideos]; // 影院与视频列表的映射 const theaterVideoMap = { 'hakone-theater': hakoneVideos, 'exotic-theater': exoticVideos, 'battle-theater': battleVideos }; // 影院与iframe ID的映射 const theaterIframeMap = { 'hakone-theater': 'hakone-iframe', 'exotic-theater': 'exotic-iframe', 'battle-theater': 'battle-iframe' }; // 更改特定影院的视频 function changeVideo(theaterId, index) { const videos = theaterVideoMap[theaterId]; const iframeId = theaterIframeMap[theaterId]; if (index >= 0 && index < videos.length) { const iframe = document.getElementById(iframeId); iframe.src = `//player.bilibili.com/player.html?bvid=${videos[index]}&p=1`; // 高亮选中的按钮 const buttons = document.querySelectorAll(`#${theaterId} .control-button`); buttons.forEach((btn, i) => { if (i === index) { btn.style.background = 'rgba(255,255,255,0.4)'; btn.style.transform = 'scale(1.1)'; } else { btn.style.background = 'rgba(255,255,255,0.2)'; btn.style.transform = 'scale(1)'; } }); showNotification(`正在播放 ${getVideoTitle(theaterId, index)}`); } } // 获取视频标题 function getVideoTitle(theaterId, index) { const theaterTitles = { 'hakone-theater': [ '箱根驿传 第一集', '箱根驿传 第二集', '箱根驿传 第三集', '箱根驿传 第四集', '箱根驿传 第五集' ], 'exotic-theater': [ '异域风情 第一集', '异域风情 第二集', '异域风情 第三集' ], 'battle-theater': [ '超燃战斗 第一集', '超燃战斗 第二集', '超燃战斗 第三集' ] }; return theaterTitles[theaterId][index]; } // 随机播放视频函数 function playRandomVideo() { // 随机选择一个BV号 const randomIndex = Math.floor(Math.random() * allVideos.length); const randomBvid = allVideos[randomIndex]; // 确定该视频属于哪个影院 let targetTheater = ''; let videoIndex = -1; if (hakoneVideos.includes(randomBvid)) { targetTheater = 'hakone-theater'; videoIndex = hakoneVideos.indexOf(randomBvid); } else if (exoticVideos.includes(randomBvid)) { targetTheater = 'exotic-theater'; videoIndex = exoticVideos.indexOf(randomBvid); } else if (battleVideos.includes(randomBvid)) { targetTheater = 'battle-theater'; videoIndex = battleVideos.indexOf(randomBvid); } // 关闭所有影院 const theaters = document.querySelectorAll('.theater-content'); theaters.forEach(theater => { theater.style.display = 'none'; }); // 移除所有header的active类 const headers = document.querySelectorAll('.theater-header'); headers.forEach(header => { header.classList.remove('active'); }); // 打开目标影院 const targetTheaterElement = document.getElementById(targetTheater); targetTheaterElement.style.display = 'block'; // 添加active类 const header = targetTheaterElement.previousElementSibling; header.classList.add('active'); // 播放选中的视频 changeVideo(targetTheater, videoIndex); // 滚动到影院位置 targetTheaterElement.scrollIntoView({ behavior: 'smooth', block: 'center' }); // 显示随机播放提示 showNotification('随机播放中，震撼体验即将开始...'); } // 显示提示消息 function showNotification(message) { // 检查是否已存在通知元素 let notification = document.getElementById('notification'); if (!notification) { // 创建通知元素 notification = document.createElement('div'); notification.id = 'notification'; notification.style.position = 'fixed'; notification.style.bottom = '30px'; notification.style.left = '50%'; notification.style.transform = 'translateX(-50%)'; notification.style.backgroundColor = 'rgba(0, 0, 0, 0.85)'; notification.style.color = 'white'; notification.style.padding = '15px 30px'; notification.style.borderRadius = '50px'; notification.style.zIndex = '1000'; notification.style.boxShadow = '0 5px 25px rgba(0, 0, 0, 0.5)'; notification.style.opacity = '0'; notification.style.transition = 'opacity 0.3s ease'; notification.style.fontSize = '16px'; notification.style.fontWeight = 'bold'; document.body.appendChild(notification); } // 更新消息并显示 notification.textContent = message; notification.style.opacity = '1'; // 3秒后隐藏 setTimeout(() => { notification.style.opacity = '0'; }, 3000); } function toggleTheater(theaterId) { const content = document.getElementById(theaterId); const header = content.previousElementSibling; // 切换显示状态 if (content.style.display === 'none') { // 关闭所有其他影院 const theaters = document.querySelectorAll('.theater-content'); theaters.forEach(theater => { if (theater.id !== theaterId) { theater.style.display = 'none'; theater.previousElementSibling.classList.remove('active'); } }); content.style.display = 'block'; header.classList.add('active'); // 添加展开动画 content.style.animation = 'slideDown 0.5s ease forwards'; // 如果有控制按钮，默认高亮第一个 const firstButton = content.querySelector('.control-button'); if (firstButton) { firstButton.style.background = 'rgba(255,255,255,0.4)'; firstButton.style.transform = 'scale(1.1)'; } } else { content.style.display = 'none'; header.classList.remove('active'); } } // 页面加载完成后的初始化 document.addEventListener('DOMContentLoaded', function() { // 默认展开第一个影院 setTimeout(() => { toggleTheater('hakone-theater'); }, 500); // 添加展开/收起动画 const headers = document.querySelectorAll('.theater-header'); headers.forEach(header => { header.addEventListener('click', function() { this.classList.toggle('active'); }); }); // 给所有控制按钮添加悬停效果 const controlButtons = document.querySelectorAll('.control-button'); controlButtons.forEach(button => { button.addEventListener('mouseover', function() { if (this.style.transform !== 'scale(1.1)') { this.style.background = 'rgba(255,255,255,0.3)'; } }); button.addEventListener('mouseout', function() { if (this.style.transform !== 'scale(1.1)') { this.style.background = 'rgba(255,255,255,0.2)'; } }); }); });","author":"彭于晏"},{"title":"博客总结","date":"2023-11-21T16:00:00.000Z","updated":"2025-04-03T06:42:41.991Z","comments":false,"path":"总结/index.html","permalink":"http://example.com/%E6%80%BB%E7%BB%93/index.html","excerpt":"","text":"📄 0 文章总数 📝 0 文章总字数 📁 0 分类总数 🏷️ 0 标签总数 📊 文章发布趋势 月度 年度 📊 分类文章数量 📂 分类统计 0 个分类 加载中... 🏷️ 标签统计 0 个标签 加载中... 🔥 最新文章 加载中... .stat-card { transition: all 0.3s; border-radius: 10px; overflow: hidden; } .stat-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); } .stat-icon { font-size: 2rem; margin-bottom: 10px; color: #0066cc; } #category-list .badge, #tag-list .badge { font-size: 0.9rem; padding: 8px 15px; margin: 0 8px 8px 0; border-radius: 20px; transition: all 0.2s; } #category-list .badge { background-color: rgba(0, 123, 255, 0.1); color: #007bff; border: 1px solid rgba(0, 123, 255, 0.2); } #tag-list .badge { background-color: rgba(23, 162, 184, 0.1); color: #17a2b8; border: 1px solid rgba(23, 162, 184, 0.2); } #category-list .badge:hover, #tag-list .badge:hover { transform: scale(1.05); } #category-list .badge:hover { background-color: #007bff; color: white; } #tag-list .badge:hover { background-color: #17a2b8; color: white; } .card-header { background-color: rgba(0,0,0,0.03); border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-item { display: flex; align-items: center; padding: 15px; border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-rank { font-size: 1.5rem; font-weight: bold; margin-right: 15px; color: #dc3545; min-width: 30px; text-align: center; } .popular-post-title { flex-grow: 1; } .popular-post-date { color: #6c757d; font-size: 0.85rem; } .loading-text { color: #6c757d; } /* 简单图表样式 */ .simple-chart { height: 250px; display: flex; align-items: flex-end; padding-top: 20px; } .chart-bar { flex: 1; background-color: #007bff; margin: 0 3px; border-radius: 3px 3px 0 0; position: relative; min-height: 1px; transition: height 0.5s; } .chart-bar-label { position: absolute; top: -20px; left: 0; right: 0; text-align: center; font-size: 11px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; transform: rotate(-45deg); transform-origin: right bottom; } .chart-bar-value { position: absolute; bottom: 5px; left: 0; right: 0; text-align: center; color: white; font-size: 12px; font-weight: bold; } .progress-bar { transition: width 0.5s; } // 避免使用外部库，改用内置fetch API document.addEventListener('DOMContentLoaded', function() { // 缓存机制，减少重复请求 const CACHE_KEY = 'blog_stats_cache'; const CACHE_TIME = 300000; // 修改为5分钟缓存 // 添加强制刷新功能 const urlParams = new URLSearchParams(window.location.search); const forceRefresh = urlParams.get('refresh') === 'true'; // 尝试从缓存获取数据 function getCache() { try { const cache = localStorage.getItem(CACHE_KEY); if (cache && !forceRefresh) { const { data, timestamp } = JSON.parse(cache); if (Date.now() - timestamp < CACHE_TIME) { return data; } } } catch (e) { console.error('读取缓存失败', e); } return null; } // 设置缓存 function setCache(data) { try { localStorage.setItem(CACHE_KEY, JSON.stringify({ data, timestamp: Date.now() })); } catch (e) { console.error('设置缓存失败', e); } } // 添加刷新按钮 const container = document.querySelector('.container'); const refreshButton = document.createElement('div'); refreshButton.className = 'text-center mb-4'; refreshButton.innerHTML = ` 刷新统计数据 `; container.insertBefore(refreshButton, container.firstChild); document.getElementById('refresh-stats').addEventListener('click', function() { window.location.href = window.location.pathname + '?refresh=true'; }); // 先检查是否有缓存 const cachedData = getCache(); if (cachedData) { processData(cachedData); return; } // 无缓存，从服务器获取 fetch('/content.json') .then(response => response.json()) .then(data => { // 缓存数据 setCache(data); processData(data); }) .catch(error => { console.error('获取博客数据失败:', error); document.querySelector('.container').innerHTML = '获取博客数据失败，请确保已安装 hexo-generator-json-content 插件'; }); function processData(data) { // 移除加载提示 document.querySelectorAll('.loading-text').forEach(element => { element.parentElement.innerHTML = ''; }); // 文章总数 const postCount = data.posts.length; document.getElementById('post-count').textContent = postCount; // 计算总字数 let wordCount = 0; data.posts.forEach(post => { if (post.text) { wordCount += post.text.length; } }); // 格式化字数显示 let formattedWordCount; if (wordCount > 1000000) { formattedWordCount = (wordCount / 1000000).toFixed(1) + 'M'; } else if (wordCount > 10000) { formattedWordCount = (wordCount / 10000).toFixed(1) + '万'; } else if (wordCount > 1000) { formattedWordCount = (wordCount / 1000).toFixed(1) + 'k'; } else { formattedWordCount = wordCount; } document.getElementById('word-count').textContent = formattedWordCount; // 获取所有分类 const categories = {}; data.posts.forEach(post => { if (post.categories) { post.categories.forEach(category => { if (categories[category.name]) { categories[category.name]++; } else { categories[category.name] = 1; } }); } }); // 显示分类数量 const categoryCount = Object.keys(categories).length; document.getElementById('category-count').textContent = categoryCount; document.getElementById('category-total').textContent = categoryCount + ' 个分类'; // 显示分类列表 const categoryList = document.getElementById('category-list'); const sortedCategories = Object.entries(categories).sort((a, b) => b[1] - a[1]); sortedCategories.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/categories/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; categoryList.appendChild(badge); }); // 获取所有标签 const tags = {}; data.posts.forEach(post => { if (post.tags) { post.tags.forEach(tag => { if (tags[tag.name]) { tags[tag.name]++; } else { tags[tag.name] = 1; } }); } }); // 显示标签数量 const tagCount = Object.keys(tags).length; document.getElementById('tag-count').textContent = tagCount; document.getElementById('tag-total').textContent = tagCount + ' 个标签'; // 显示标签列表 const tagList = document.getElementById('tag-list'); const sortedTags = Object.entries(tags).sort((a, b) => b[1] - a[1]); sortedTags.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/tags/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; tagList.appendChild(badge); }); // 按日期对文章进行分组 const postsByMonth = {}; const postsByYear = {}; data.posts.forEach(post => { if (post.date) { const date = new Date(post.date); const year = date.getFullYear(); const month = date.getMonth(); // 按月分组 const monthKey = `${year}-${month+1}`; if (postsByMonth[monthKey]) { postsByMonth[monthKey]++; } else { postsByMonth[monthKey] = 1; } // 按年分组 if (postsByYear[year]) { postsByYear[year]++; } else { postsByYear[year] = 1; } } }); // 创建文章发布统计图表 - 使用简单的DIV实现 const monthLabels = []; const monthData = []; // 获取最近12个月的数据 const now = new Date(); for (let i = 11; i >= 0; i--) { const month = new Date(now.getFullYear(), now.getMonth() - i, 1); const year = month.getFullYear(); const monthNum = month.getMonth() + 1; const monthKey = `${year}-${monthNum}`; const monthName = `${year}/${monthNum}`; monthLabels.push(monthName); monthData.push(postsByMonth[monthKey] || 0); } const yearLabels = Object.keys(postsByYear).sort(); const yearData = yearLabels.map(year => postsByYear[year]); // 创建简单的柱状图 renderSimpleBarChart('post-chart', monthLabels, monthData); // 切换年度/月度按钮事件 document.getElementById('month-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('year-btn').classList.remove('active'); renderSimpleBarChart('post-chart', monthLabels, monthData); }); document.getElementById('year-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('month-btn').classList.remove('active'); renderSimpleBarChart('post-chart', yearLabels, yearData); }); // 创建分类统计图表 const topCategories = sortedCategories.slice(0, 8); const categoryChartLabels = topCategories.map(item => item[0]); const categoryChartData = topCategories.map(item => item[1]); renderSimpleBarChart('category-chart', categoryChartLabels, categoryChartData, [ '#FF9999', '#99CCFF', '#FFCC99', '#99FF99', '#CC99FF', '#FFFF99', '#FF99CC', '#99FFCC' ]); // 热门文章展示（这里以日期最新的5篇作为演示） const popularPosts = [...data.posts].sort((a, b) => { return new Date(b.date) - new Date(a.date); }).slice(0, 5); const popularPostsContainer = document.getElementById('popular-posts'); popularPostsContainer.innerHTML = ''; popularPosts.forEach((post, index) => { const postDate = new Date(post.date); const formattedDate = `${postDate.getFullYear()}-${postDate.getMonth()+1}-${postDate.getDate()}`; const postItem = document.createElement('a'); // 修复文章链接路径，确保以斜杠开头 postItem.href = post.path.startsWith('/') ? post.path : '/' + post.path; postItem.className = 'list-group-item list-group-item-action popular-post-item'; postItem.innerHTML = ` ${index+1} ${post.title} ${formattedDate} `; popularPostsContainer.appendChild(postItem); }); } // 渲染简单的柱状图，不依赖外部库 function renderSimpleBarChart(containerId, labels, data, colors) { const container = document.getElementById(containerId); container.innerHTML = ''; // 找出最大值 const maxValue = Math.max(...data); // 创建柱状图 data.forEach((value, index) => { const bar = document.createElement('div'); bar.className = 'chart-bar'; // 根据数值设置高度百分比 const heightPercent = maxValue > 0 ? (value / maxValue * 100) : 0; bar.style.height = heightPercent + '%'; // 如果有自定义颜色，则使用 if (colors && colors[index]) { bar.style.backgroundColor = colors[index]; } // 添加标签 const label = document.createElement('div'); label.className = 'chart-bar-label'; label.textContent = labels[index]; bar.appendChild(label); // 添加数值 if (value > 0) { const valueDiv = document.createElement('div'); valueDiv.className = 'chart-bar-value'; valueDiv.textContent = value; bar.appendChild(valueDiv); } container.appendChild(bar); }); } });"}],"posts":[{"title":"test","slug":"test","date":"2025-04-16T13:33:45.000Z","updated":"2025-04-16T13:33:45.173Z","comments":true,"path":"2025/04/16/test/","permalink":"http://example.com/2025/04/16/test/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[],"tags":[]}