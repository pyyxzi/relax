{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"静谧音乐盒","date":"2025-04-16T13:36:02.000Z","updated":"2025-04-17T08:25:24.154Z","comments":false,"path":"music/index.html","permalink":"http://example.com/music/index.html","excerpt":"","text":"歌曲名称 歌手 00:00 00:00 00:00 播放列表 推荐音乐网站 爱听音乐网 拯救你的音乐荒 小白音乐 简单的在线音乐网站 :root { --primary-color: #31c27c; --primary-hover: #2ca971; --primary-glow: rgba(49, 194, 124, 0.7); --secondary-color: #6c5ce7; --secondary-glow: rgba(108, 92, 231, 0.7); --accent-color: #ff79c6; --accent-glow: rgba(255, 121, 198, 0.7); --bg-color: #ffffff; --bg-panel: rgba(255, 255, 255, 0.9); --bg-panel-light: rgba(250, 250, 255, 0.7); --text-color: #333333; --text-secondary: #666666; --shadow-color: rgba(0, 0, 0, 0.1); --shadow-glow: 0 0 20px rgba(49, 194, 124, 0.2); --gradient-1: linear-gradient(45deg, #31c27c, #4ecdc4); --gradient-2: linear-gradient(45deg, #6c5ce7, #3a86ff); --gradient-3: linear-gradient(45deg, #ff79c6, #ff5252); --transition-slow: 0.5s cubic-bezier(0.19, 1, 0.22, 1); --transition-medium: 0.3s ease; --transition-fast: 0.2s ease; --border-glow: 0 0 5px rgba(49, 194, 124, 0.5); } @keyframes backgroundPulse { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } @keyframes glow { 0% { box-shadow: 0 0 5px var(--primary-glow); } 50% { box-shadow: 0 0 15px var(--primary-glow); } 100% { box-shadow: 0 0 5px var(--primary-glow); } } @keyframes float { 0% { transform: translateY(0); } 50% { transform: translateY(-5px); } 100% { transform: translateY(0); } } @keyframes rotate { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } @keyframes neonText { 0% { text-shadow: 0 0 5px var(--primary-glow); } 50% { text-shadow: 0 0 10px var(--primary-glow), 0 0 15px var(--primary-glow); } 100% { text-shadow: 0 0 5px var(--primary-glow); } } @keyframes equalizer { 0% { height: 5px; } 50% { height: 20px; } 100% { height: 5px; } } @keyframes lightMove { 0% { background-position: 0% 0%; } 100% { background-position: 100% 0%; } } body { background-color: var(--bg-color); color: var(--text-color); } .neo-player { position: relative; max-width: 900px; margin: 30px auto; padding: 25px; border-radius: 20px; background: var(--bg-panel); box-shadow: 0 10px 30px var(--shadow-color), var(--shadow-glow); font-family: 'Helvetica Neue', Arial, 'PingFang SC', 'Hiragino Sans GB', 'Microsoft YaHei', sans-serif; backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.5); overflow: hidden; z-index: 10; } .glowing-background { position: absolute; top: 0; left: 0; width: 100%; height: 100%; z-index: -1; overflow: hidden; } .light-effects { position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: linear-gradient( 45deg, rgba(49, 194, 124, 0.1) 0%, rgba(108, 92, 231, 0.1) 25%, rgba(255, 121, 198, 0.1) 50%, rgba(108, 92, 231, 0.1) 75%, rgba(49, 194, 124, 0.1) 100% ); background-size: 400% 400%; animation: backgroundPulse 20s ease infinite; filter: blur(50px); opacity: 0.4; will-change: background-position; transform: rotate(15deg); } .music-container { display: flex; flex-direction: column; gap: 30px; position: relative; z-index: 1; } /* 音乐信息区域 */ .music-info { display: flex; gap: 25px; align-items: center; position: relative; animation: float 8s ease-in-out infinite; will-change: transform; } .album-cover { width: 180px; height: 180px; border-radius: 15px; position: relative; overflow: hidden; box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15), 0 0 10px var(--primary-glow); transition: transform var(--transition-medium), box-shadow var(--transition-medium); animation: glow 4s infinite; will-change: transform, box-shadow; } .album-cover:hover { transform: translateY(-5px) scale(1.05); box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2), 0 0 15px var(--primary-glow); } .album-cover img { width: 100%; height: 100%; object-fit: cover; transition: transform var(--transition-slow); } .album-disc { position: absolute; top: 50%; left: 50%; width: 40px; height: 40px; background: rgba(255, 255, 255, 0.9); border-radius: 50%; transform: translate(-50%, -50%); box-shadow: 0 0 0 10px rgba(255, 255, 255, 0.3), 0 0 10px var(--primary-glow); pointer-events: none; opacity: 0; transition: opacity var(--transition-medium); } .playing .album-cover .album-disc { opacity: 0.9; } /* 简化音频可视化 - 减少动画元素数量 */ .visualizer { position: absolute; bottom: -10px; left: 0; width: 100%; height: 30px; display: flex; justify-content: center; align-items: flex-end; gap: 3px; z-index: 5; } .visualizer-bar { width: 4px; height: 5px; background: var(--primary-color); border-radius: 1px; opacity: 0.8; will-change: height; } /* 减少视觉元素数量，使用CSS变量以提高性能 */ .visualizer-bar:nth-child(1) { animation: equalizer 1.0s ease-in-out infinite; } .visualizer-bar:nth-child(2) { animation: equalizer 0.8s ease-in-out infinite 0.1s; } .visualizer-bar:nth-child(3) { animation: equalizer 1.2s ease-in-out infinite 0.2s; } .visualizer-bar:nth-child(4) { animation: equalizer 0.9s ease-in-out infinite 0.3s; } .visualizer-bar:nth-child(5) { animation: equalizer 1.1s ease-in-out infinite 0.4s; } .playing .visualizer-bar:nth-child(1) { animation-duration: 0.6s; } .playing .visualizer-bar:nth-child(2) { animation-duration: 0.8s; } .playing .visualizer-bar:nth-child(3) { animation-duration: 0.5s; } .playing .visualizer-bar:nth-child(4) { animation-duration: 0.7s; } .playing .visualizer-bar:nth-child(5) { animation-duration: 0.9s; } .music-details { flex: 1; } .music-details h3 { margin: 0 0 8px 0; font-size: 2rem; color: var(--text-color); text-shadow: 0 0 3px rgba(49, 194, 124, 0.2); position: relative; display: inline-block; } .music-details h3:after { content: ''; position: absolute; width: 100%; height: 2px; background: linear-gradient(90deg, var(--primary-color), transparent); bottom: -4px; left: 0; } .music-details p { margin: 0 0 20px 0; color: var(--text-secondary); font-size: 1.1rem; letter-spacing: 0.5px; } .music-source { display: inline-flex; align-items: center; padding: 10px 20px; background: var(--bg-panel-light); border-radius: 30px; color: var(--text-secondary); text-decoration: none; font-size: 0.9rem; transition: all var(--transition-medium); margin-top: 15px; border: 1px solid rgba(255, 255, 255, 0.8); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05); position: relative; overflow: hidden; } .music-source:before { content: ''; position: absolute; top: 0; left: -100%; width: 50%; height: 100%; background: linear-gradient( 90deg, transparent, rgba(255, 255, 255, 0.5), transparent ); transition: left 0.6s; will-change: left; } .music-source:hover { background: var(--primary-color); color: white; transform: translateY(-3px); box-shadow: 0 8px 20px rgba(49, 194, 124, 0.2), 0 0 15px var(--primary-glow); } .music-source:hover:before { left: 100%; } .music-source i { margin-right: 8px; font-size: 1rem; } /* 音乐控制区域 */ .music-controls { padding: 20px 0; border-top: 1px solid rgba(49, 194, 124, 0.1); border-bottom: 1px solid rgba(49, 194, 124, 0.1); position: relative; } .music-controls:before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient( 90deg, var(--secondary-glow) 0%, var(--primary-glow) 50%, var(--accent-glow) 100% ); opacity: 0.03; z-index: -1; } .progress-container { margin-bottom: 20px; position: relative; } .progress-time { display: flex; justify-content: space-between; color: var(--text-secondary); font-size: 0.85rem; margin-bottom: 8px; letter-spacing: 1px; } .progress-bar { height: 8px; background-color: rgba(0, 0, 0, 0.05); border-radius: 4px; cursor: pointer; position: relative; overflow: hidden; box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1); } .progress { height: 100%; width: 0%; background: var(--gradient-1); border-radius: 4px; position: relative; transition: width 0.1s linear; box-shadow: 0 0 5px var(--primary-glow); } /* 优化流光效果，减少绘制复杂度 */ .progress:after { content: ''; position: absolute; top: 0; left: 0; width: 50%; height: 100%; background: linear-gradient( 90deg, transparent, rgba(255, 255, 255, 0.5), transparent ); background-size: 100% 100%; animation: lightMove 2s linear infinite; will-change: background-position; } .progress-handle { position: absolute; right: -8px; top: 50%; width: 16px; height: 16px; background: white; border-radius: 50%; border: 3px solid var(--primary-color); transform: translateY(-50%) scale(0); transition: transform var(--transition-fast); z-index: 2; box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1), 0 0 5px var(--primary-glow); } .progress-bar:hover .progress-handle { transform: translateY(-50%) scale(1); } .progress-bar.active .progress-handle { transform: translateY(-50%) scale(1.2); box-shadow: 0 3px 8px rgba(0, 0, 0, 0.15), 0 0 10px var(--primary-glow); } .progress-hover-time { position: absolute; top: -30px; transform: translateX(-50%); background: rgba(0, 0, 0, 0.7); color: white; padding: 3px 10px; border-radius: 10px; font-size: 0.8rem; opacity: 0; transition: opacity var(--transition-fast); pointer-events: none; box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1); border: 1px solid rgba(255, 255, 255, 0.1); } .progress-bar:hover .progress-hover-time { opacity: 1; } .control-buttons { display: flex; align-items: center; justify-content: center; gap: 20px; margin-top: 10px; } .control-btn { background: none; border: none; font-size: 1rem; color: var(--text-secondary); cursor: pointer; transition: all var(--transition-medium); width: 40px; height: 40px; border-radius: 50%; display: flex; align-items: center; justify-content: center; position: relative; background-color: rgba(0, 0, 0, 0.02); border: 1px solid rgba(0, 0, 0, 0.05); } .control-btn:hover { color: var(--text-color); background-color: rgba(49, 194, 124, 0.1); box-shadow: 0 0 10px var(--primary-glow); transform: translateY(-2px); } .control-btn.active { color: var(--primary-color); text-shadow: 0 0 5px var(--primary-glow); } .control-btn::after { content: attr(title); position: absolute; bottom: -30px; left: 50%; transform: translateX(-50%) scale(0); background: rgba(0, 0, 0, 0.8); color: white; padding: 5px 10px; border-radius: 10px; font-size: 0.8rem; white-space: nowrap; opacity: 0; transition: all var(--transition-fast); pointer-events: none; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); border: 1px solid rgba(255, 255, 255, 0.1); } .control-btn:hover::after { opacity: 1; transform: translateX(-50%) scale(1); bottom: -40px; } .play-btn { width: 60px; height: 60px; background: var(--gradient-1); color: white; box-shadow: 0 5px 15px rgba(49, 194, 124, 0.2), 0 0 10px var(--primary-glow); font-size: 1.5rem; z-index: 2; } .play-btn:hover { background: var(--gradient-2); transform: scale(1.05); box-shadow: 0 8px 20px rgba(49, 194, 124, 0.25), 0 0 15px var(--primary-glow); color: white; } .play-btn i { position: relative; } /* 简化脉冲动画 */ .play-btn:before { content: ''; position: absolute; top: -5px; left: -5px; right: -5px; bottom: -5px; background: var(--gradient-1); border-radius: 50%; z-index: -1; opacity: 0.2; filter: blur(10px); animation: pulse 3s infinite; will-change: transform, opacity; } @keyframes pulse { 0% { transform: scale(1); opacity: 0.2; } 50% { transform: scale(1.05); opacity: 0.3; } 100% { transform: scale(1); opacity: 0.2; } } .volume-container { display: flex; align-items: center; position: relative; } .volume-slider { width: 0; overflow: hidden; transition: width var(--transition-medium); margin-left: 10px; } .volume-container:hover .volume-slider { width: 80px; } input[type=range] { -webkit-appearance: none; height: 5px; border-radius: 2.5px; background: rgba(0, 0, 0, 0.05); outline: none; } input[type=range]::-webkit-slider-thumb { -webkit-appearance: none; width: 12px; height: 12px; border-radius: 50%; background: var(--primary-color); cursor: pointer; box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1), 0 0 5px var(--primary-glow); } /* 播放列表区域 */ .playlist-container { margin-top: 10px; background: var(--bg-panel-light); border-radius: 15px; padding: 15px; border: 1px solid rgba(255, 255, 255, 0.8); box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); position: relative; overflow: hidden; } .playlist-container:before { content: ''; position: absolute; width: 200px; height: 200px; background: var(--primary-glow); border-radius: 50%; filter: blur(70px); opacity: 0.05; top: -100px; right: -100px; } .playlist-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px; position: relative; } .playlist-header h3 { color: var(--text-color); font-size: 1.2rem; margin: 0; font-weight: 500; letter-spacing: 1px; position: relative; display: inline-block; } .playlist-header h3:after { content: ''; position: absolute; bottom: -5px; left: 0; width: 30px; height: 2px; background: var(--primary-color); box-shadow: 0 0 5px var(--primary-glow); } .playlist-count { color: var(--primary-color); font-size: 0.9rem; margin-left: 5px; } .playlist { list-style: none; padding: 0; margin: 0; max-height: 300px; overflow-y: auto; border-radius: 10px; background-color: rgba(0, 0, 0, 0.02); padding: 5px; } .playlist li { padding: 12px 15px; border-radius: 8px; margin-bottom: 5px; cursor: pointer; transition: all var(--transition-medium); display: flex; align-items: center; border: 1px solid transparent; } .playlist li:hover { background-color: rgba(49, 194, 124, 0.08); border: 1px solid rgba(49, 194, 124, 0.1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.03), 0 0 5px var(--primary-glow); transform: translateX(5px); } .playlist li.active { background-color: rgba(49, 194, 124, 0.15); color: var(--primary-color); border: 1px solid rgba(49, 194, 124, 0.2); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05), 0 0 5px var(--primary-glow); } .playlist li .song-index { width: 30px; text-align: center; color: var(--text-secondary); font-size: 0.9rem; } .playlist li.active .song-index { display: none; } .playlist li.active::before { content: \"\\f04b\"; font-family: \"Font Awesome 5 Free\"; font-weight: 900; color: var(--primary-color); width: 30px; text-align: center; text-shadow: 0 0 5px var(--primary-glow); } .playlist li .song-info { flex: 1; display: flex; flex-direction: column; margin-right: 10px; } .playlist li .song-name { font-size: 0.95rem; color: var(--text-color); margin-bottom: 3px; } .playlist li .song-artist { font-size: 0.8rem; color: var(--text-secondary); } .playlist li .song-duration { color: var(--text-secondary); font-size: 0.8rem; } .playing .album-cover img { animation: rotate 20s linear infinite; animation-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1); will-change: transform; } /* 滚动条样式 */ .playlist::-webkit-scrollbar { width: 6px; } .playlist::-webkit-scrollbar-track { background: rgba(0, 0, 0, 0.03); border-radius: 3px; } .playlist::-webkit-scrollbar-thumb { background: rgba(49, 194, 124, 0.2); border-radius: 3px; } .playlist::-webkit-scrollbar-thumb:hover { background: rgba(49, 194, 124, 0.3); } /* 音乐资源链接 */ .music-resources { margin: 50px auto; max-width: 900px; padding: 20px; position: relative; } .music-resources:before { content: ''; position: absolute; width: 100%; height: 300px; background: var(--secondary-glow); filter: blur(100px); opacity: 0.03; top: -100px; left: 0; z-index: -1; } .resources-title { text-align: center; margin-bottom: 40px; color: var(--text-color); font-size: 2rem; position: relative; letter-spacing: 2px; font-weight: 300; animation: neonText 4s infinite alternate; will-change: text-shadow; } .resources-title:after { content: ''; display: block; width: 80px; height: 3px; background: var(--gradient-2); margin: 15px auto 0; border-radius: 3px; box-shadow: 0 0 5px var(--secondary-glow); } .resources-container { display: flex; align-items: stretch; background: var(--bg-panel); border-radius: 20px; box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 0 10px var(--secondary-glow); position: relative; overflow: hidden; backdrop-filter: blur(10px); -webkit-backdrop-filter: blur(10px); border: 1px solid rgba(255, 255, 255, 0.8); animation: float 10s ease infinite; will-change: transform; } .resources-container:before { content: ''; position: absolute; top: -150px; left: -150px; width: 300px; height: 300px; background: radial-gradient(circle, var(--primary-glow), transparent 70%); opacity: 0.05; z-index: 0; } .resources-container:after { content: ''; position: absolute; bottom: -150px; right: -150px; width: 300px; height: 300px; background: radial-gradient(circle, var(--secondary-glow), transparent 70%); opacity: 0.05; z-index: 0; } .resource-item { flex: 1; position: relative; z-index: 1; padding: 20px; transition: all 0.5s cubic-bezier(0.19, 1, 0.22, 1); } .resource-divider { width: 1px; height: 80%; align-self: center; background: linear-gradient(to bottom, transparent, var(--primary-color), var(--secondary-color), transparent); margin: 0 10px; position: relative; z-index: 2; opacity: 0.3; } .resource-item a { display: flex; align-items: center; padding: 25px; border-radius: 15px; background: linear-gradient(135deg, rgba(255, 255, 255, 0.9), rgba(250, 250, 255, 0.95)); text-decoration: none; color: var(--text-color); box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); transition: all 0.4s cubic-bezier(0.19, 1, 0.22, 1); position: relative; overflow: hidden; border: 1px solid rgba(255, 255, 255, 0.8); } .resource-item-left a { background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(250, 250, 255, 0.9)); } .resource-item-right a { background: linear-gradient(135deg, rgba(250, 250, 255, 0.9), rgba(255, 255, 255, 0.95)); } .resource-item a:hover { transform: translateY(-10px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1), 0 0 15px var(--primary-glow); } .resource-item a:before { content: ''; position: absolute; width: 50%; height: 100%; background: linear-gradient( 90deg, transparent, rgba(255, 255, 255, 0.5), transparent ); top: 0; left: -100%; transition: left 0.6s ease; will-change: left; } .resource-item a:hover:before { left: 150%; } .resource-item-left a:hover { background: linear-gradient(135deg, rgba(49, 194, 124, 0.05), rgba(108, 92, 231, 0.1)); } .resource-item-right a:hover { background: linear-gradient(135deg, rgba(108, 92, 231, 0.1), rgba(49, 194, 124, 0.05)); } .resource-icon { width: 60px; height: 60px; display: flex; align-items: center; justify-content: center; border-radius: 15px; background: var(--gradient-2); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1), 0 0 10px var(--secondary-glow); margin-right: 20px; position: relative; overflow: hidden; } .resource-icon:before { content: ''; position: absolute; width: 150%; height: 150%; background: linear-gradient(to bottom right, rgba(255, 255, 255, 0.8), transparent); top: -100%; left: -100%; transform: rotate(45deg); transition: all 0.5s cubic-bezier(0.19, 1, 0.22, 1); will-change: transform; } .resource-item a:hover .resource-icon:before { top: 100%; left: 100%; } .resource-icon i { font-size: 1.6rem; color: white; z-index: 1; text-shadow: 0 0 5px rgba(255, 255, 255, 0.5); will-change: transform; } .resource-info { flex: 1; } .resource-info h3 { font-size: 1.4rem; margin: 0 0 5px; font-weight: 500; color: var(--text-color); transition: all 0.3s ease; letter-spacing: 1px; position: relative; display: inline-block; } .resource-info h3:after { content: ''; position: absolute; left: 0; bottom: -5px; width: 0; height: 2px; background: var(--gradient-2); transition: width 0.3s ease; will-change: width; } .resource-item a:hover .resource-info h3:after { width: 100%; } .resource-info p { margin: 0; font-size: 0.9rem; color: var(--text-secondary); transition: all 0.3s ease; letter-spacing: 0.5px; } .resource-item a:hover .resource-info h3 { color: var(--secondary-color); text-shadow: 0 0 5px var(--secondary-glow); } .resource-item a:hover .resource-info p { color: var(--text-color); } /* 优化移动端性能 */ @media (max-width: 768px) { .neo-player { margin: 15px; padding: 15px; } .music-info { flex-direction: column; align-items: center; text-align: center; animation: none; /* 禁用可能导致移动端卡顿的动画 */ } .album-cover { width: 150px; height: 150px; margin-bottom: 20px; animation: none; /* 禁用可能导致移动端卡顿的动画 */ } .control-buttons { flex-wrap: wrap; gap: 15px; } .control-btn::after { display: none; /* 移动端不显示提示 */ } .resources-container { flex-direction: column; animation: none; /* 禁用可能导致移动端卡顿的动画 */ } .resource-divider { width: 80%; height: 1px; margin: 10px auto; } .resource-item { width: 100%; } /* 移动端禁用复杂动画，提高性能 */ .light-effects { animation: none; opacity: 0.2; } .visualizer { display: none; } .progress:after { animation: none; } .play-btn:before { animation: none; } } document.addEventListener('DOMContentLoaded', function() { // 获取DOM元素 const playBtn = document.getElementById('play'); const prevBtn = document.getElementById('prev'); const nextBtn = document.getElementById('next'); const randomBtn = document.getElementById('random'); const loopBtn = document.getElementById('loop'); const volumeBtn = document.getElementById('volume-btn'); const volumeSlider = document.getElementById('volume'); const progress = document.querySelector('.progress'); const progressHandle = document.querySelector('.progress-handle'); const progressContainer = document.querySelector('.progress-bar'); const progressHoverTime = document.querySelector('.progress-hover-time'); const currentTimeEl = document.getElementById('current-time'); const durationEl = document.getElementById('duration'); const title = document.getElementById('music-title'); const artist = document.getElementById('music-artist'); const cover = document.getElementById('album-cover'); const playlistEl = document.getElementById('playlist'); const musicInfo = document.querySelector('.music-info'); const playlistCount = document.querySelector('.playlist-count'); // 创建音频对象 const audio = new Audio(); // 音乐列表 const musicList = [ { title: '7 Years', artist: 'Lukas Graham', path: '/music/7 years.mp3', cover: 'https://picsum.photos/id/10/200' }, { title: 'Pop', artist: 'Various Artists', path: '/music/pop.mp3', cover: 'https://picsum.photos/id/20/200' }, { title: 'Time', artist: 'Hans Zimmer', path: '/music/time.mp3', cover: 'https://picsum.photos/id/30/200' }, { title: 'Shed a Light', artist: 'Robin Schulz & David Guetta', path: '/music/shed a light.mp3', cover: 'https://picsum.photos/id/40/200' }, { title: '白月光和朱砂痣', artist: '大籽', path: '/music/白月光和朱砂痣.mp3', cover: 'https://picsum.photos/id/50/200' }, { title: 'Counting Stars', artist: 'OneRepublic', path: '/music/counting stars.mp3', cover: 'https://picsum.photos/id/60/200' }, { title: 'Star Sky', artist: 'Two Steps From Hell', path: '/music/star sky.mp3', cover: 'https://picsum.photos/id/70/200' }, { title: 'Something Just Like This', artist: 'The Chainsmokers & Coldplay', path: '/music/Something just like this.mp3', cover: 'https://picsum.photos/id/80/200' }, { title: '飞鸟和蝉', artist: '任然', path: '/music/飞鸟和蝉.mp3', cover: 'https://picsum.photos/id/90/200' }, { title: 'Waiting For Love', artist: 'Avicii', path: '/music/waiting for love.mp3', cover: 'https://picsum.photos/id/100/200' }, { title: '穿越火线', artist: 'Various Artists', path: '/music/穿越火线.mp3', cover: 'https://picsum.photos/id/110/200' }, { title: '离别开出花', artist: '就是南方凯（项学凯）', path: '/music/离别开出花.mp3', cover: 'https://picsum.photos/id/120/200' }, { title: '奢香夫人', artist: '凤凰传奇', path: '/music/奢香夫人.mp3', cover: 'https://picsum.photos/id/130/200' } ]; // 状态变量 let musicIndex = 0; // 当前播放索引 let isRandom = false; // 随机播放状态 let isLoop = false; // 循环播放状态 let isDraggingProgressBar = false; let progressBarWasPlaying = false; let currentTime = 0; // 当前播放时间 let duration = 0; // 总时长 let volumeBeforeMute = 0.7; // 静音前的音量 // 初始化 function init() { loadMusic(musicIndex); createPlaylist(); // 设置初始音量 audio.volume = volumeSlider.value / 100; // 添加事件监听 setupEventListeners(); // 显示播放列表数量 playlistCount.textContent = `(${musicList.length})`; // 初始化进度条预览 initProgressPreview(); } // 设置事件监听器 function setupEventListeners() { // 播放控制按钮 playBtn.addEventListener('click', togglePlay); prevBtn.addEventListener('click', prevSong); nextBtn.addEventListener('click', nextSong); randomBtn.addEventListener('click', toggleRandom); loopBtn.addEventListener('click', toggleLoop); // 音量控制 volumeBtn.addEventListener('click', toggleMute); volumeSlider.addEventListener('input', setVolume); // 音频事件 audio.addEventListener('timeupdate', audioTimeUpdateHandler); audio.addEventListener('ended', songEnded); audio.addEventListener('loadedmetadata', () => { duration = audio.duration; updateDuration(); }); // --- 设置进度条监听器 --- setupProgressBarListeners(); // 键盘快捷键支持 document.addEventListener('keydown', handleKeyboardShortcuts); } // --- 进度条逻辑 --- function setupProgressBarListeners() { // 点击事件 progressContainer.addEventListener('click', (e) => { // 短暂延迟后检查拖动标志，避免拖动结束时误触发点击 setTimeout(() => { if (isDraggingProgressBar) return; if (!isNaN(audio.duration)) { const rect = progressContainer.getBoundingClientRect(); const pos = Math.max(0, Math.min(1, (e.clientX - rect.left) / rect.width)); const targetTime = pos * audio.duration; const wasPaused = audio.paused; audio.currentTime = targetTime; updateProgressUI(pos * 100); // Update UI immediately // If it was paused by the click somehow, resume if needed if (wasPaused && !audio.paused) { // It resumed automatically, good. } else if (!wasPaused && audio.paused) { // It paused unexpectedly, try to resume audio.play().catch(err => console.error(\"Click play error:\", err)); } } }, 50); // Small delay to let drag flag reset if needed }); // 拖动开始 (Mouse & Touch) const handleDragStart = (e) => { if (e.type === 'mousedown' && e.button !== 0) return; // Only left click if (isNaN(audio.duration) || audio.duration { if (!isDraggingProgressBar) return; e.preventDefault(); updateTargetTimeFromEvent(e); updateProgressUI((currentTime / duration) * 100); // Update UI only }; // 拖动结束 (Mouse & Touch) const handleDragEnd = () => { if (!isDraggingProgressBar) return; // Set final audio time audio.currentTime = currentTime; // Resume playback if needed if (progressBarWasPlaying) { // Use timeout to ensure currentTime is processed setTimeout(() => { audio.play().catch(err => console.error(\"Drag end play error:\", err)); }, 50); } // Cleanup progressContainer.classList.remove('active'); document.body.style.cursor = ''; document.removeEventListener('mousemove', handleDragMove); document.removeEventListener('mouseup', handleDragEnd); document.removeEventListener('touchmove', handleDragMove); document.removeEventListener('touchend', handleDragEnd); // Reset drag flag after a short delay to help click detection setTimeout(() => { isDraggingProgressBar = false; }, 50); }; // 从事件更新目标时间 (但不设置 audio.currentTime) const updateTargetTimeFromEvent = (e) => { const rect = progressContainer.getBoundingClientRect(); let clientX; if (e.type.includes('touch')) { clientX = (e.touches[0] || e.changedTouches[0]).clientX; } else { clientX = e.clientX; } const pos = Math.max(0, Math.min(1, (clientX - rect.left) / rect.width)); currentTime = pos * duration; // Update the global target time updateCurrentTimeDisplayOnly(currentTime); // Update UI time display }; // 更新进度条UI const updateProgressUI = (percent) => { if (isNaN(percent)) return; progress.style.width = `${percent}%`; progressHandle.style.left = `${percent}%`; }; // 更新UI时间显示 const updateCurrentTimeDisplayOnly = (time) => { if (isNaN(time)) return; const minutes = Math.floor(time / 60); const seconds = Math.floor(time % 60); currentTimeEl.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`; } // 添加初始监听器 progressContainer.addEventListener('mousedown', handleDragStart); progressContainer.addEventListener('touchstart', handleDragStart, { passive: false }); } // 音频时间更新处理 - 仅在非拖动时更新 function audioTimeUpdateHandler() { if (!isDraggingProgressBar && !isNaN(audio.duration)) { currentTime = audio.currentTime; // Update global currentTime const progressPercent = (currentTime / audio.duration) * 100; // Directly call UI update progress.style.width = `${progressPercent}%`; progressHandle.style.left = `${progressPercent}%`; // Update UI time display const minutes = Math.floor(currentTime / 60); const seconds = Math.floor(currentTime % 60); currentTimeEl.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`; } } // 更新当前时间显示 function updateCurrentTime() { // This function might still be called by other parts, // ensure it uses the display-only helper if needed or is removed. // Let's keep it simple for now, time display is handled elsewhere. } function updateProgress() { // This function is likely redundant now. } // 加载音乐 function loadMusic(index) { const music = musicList[index]; title.textContent = music.title; artist.textContent = music.artist; cover.src = music.cover; audio.src = music.path; updatePlaylistActiveItem(); } // 创建播放列表 function createPlaylist() { playlistEl.innerHTML = ''; musicList.forEach((music, index) => { const li = document.createElement('li'); li.innerHTML = ` ${index + 1} ${music.title} ${music.artist} --:-- `; li.dataset.index = index; if (index === musicIndex) { li.classList.add('active'); } li.addEventListener('click', () => { musicIndex = parseInt(li.dataset.index); loadMusic(musicIndex); playMusic(); }); // 预加载音频时长 const tempAudio = new Audio(music.path); tempAudio.addEventListener('loadedmetadata', () => { const durationMin = Math.floor(tempAudio.duration / 60); const durationSec = Math.floor(tempAudio.duration % 60); const durationEl = li.querySelector('.song-duration'); durationEl.textContent = `${durationMin}:${durationSec < 10 ? '0' : ''}${durationSec}`; }); playlistEl.appendChild(li); }); } // 更新播放列表中的活动项 function updatePlaylistActiveItem() { const items = playlistEl.querySelectorAll('li'); items.forEach(item => { item.classList.remove('active'); if (parseInt(item.dataset.index) === musicIndex) { item.classList.add('active'); item.scrollIntoView({ behavior: 'smooth', block: 'nearest' }); } }); } // 播放/暂停切换 function togglePlay() { if (audio.paused) { playMusic(); } else { pauseMusic(); } } // 播放音乐 function playMusic() { musicInfo.classList.add('playing'); playBtn.innerHTML = ''; // 播放音频 const playPromise = audio.play(); // 处理播放延迟和错误 if (playPromise !== undefined) { playPromise.catch(error => { console.error('播放失败:', error); pauseMusic(); }); } } // 暂停音乐 function pauseMusic() { musicInfo.classList.remove('playing'); playBtn.innerHTML = ''; audio.pause(); } // 上一首 function prevSong() { if (isRandom) { randomSong(); } else { musicIndex = (musicIndex - 1 + musicList.length) % musicList.length; loadMusic(musicIndex); playMusic(); } } // 下一首 function nextSong() { if (isRandom) { randomSong(); } else { musicIndex = (musicIndex + 1) % musicList.length; loadMusic(musicIndex); playMusic(); } } // 随机歌曲 function randomSong() { let newIndex; do { newIndex = Math.floor(Math.random() * musicList.length); } while (newIndex === musicIndex && musicList.length > 1); musicIndex = newIndex; loadMusic(musicIndex); playMusic(); } // 歌曲结束时处理 function songEnded() { if (isLoop) { audio.currentTime = 0; playMusic(); } else { nextSong(); } } // 切换随机播放 function toggleRandom() { isRandom = !isRandom; randomBtn.classList.toggle('active', isRandom); // 显示反馈 showButtonFeedback(randomBtn, isRandom ? '随机播放: 开启' : '随机播放: 关闭'); } // 切换循环播放 function toggleLoop() { isLoop = !isLoop; loopBtn.classList.toggle('active', isLoop); // 显示反馈 showButtonFeedback(loopBtn, isLoop ? '循环播放: 开启' : '循环播放: 关闭'); } // 切换静音 function toggleMute() { if (audio.volume > 0) { volumeBeforeMute = audio.volume; audio.volume = 0; volumeBtn.innerHTML = ''; volumeSlider.value = 0; showButtonFeedback(volumeBtn, '静音'); } else { audio.volume = volumeBeforeMute; updateVolumeIcon(volumeBeforeMute * 100); volumeSlider.value = volumeBeforeMute * 100; showButtonFeedback(volumeBtn, '恢复音量'); } } // 设置音量 function setVolume() { const value = volumeSlider.value; audio.volume = value / 100; updateVolumeIcon(value); } // 更新音量图标 function updateVolumeIcon(value) { if (value > 50) { volumeBtn.innerHTML = ''; } else if (value > 0) { volumeBtn.innerHTML = ''; } else { volumeBtn.innerHTML = ''; } } // 更新总时长显示 function updateDuration() { if (!isNaN(duration)) { const minutes = Math.floor(duration / 60); const seconds = Math.floor(duration % 60); durationEl.textContent = `${minutes}:${seconds < 10 ? '0' : ''}${seconds}`; } } // 处理键盘快捷键 function handleKeyboardShortcuts(e) { // 仅当焦点不在输入区域时响应 if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') { switch(e.code) { case 'Space': e.preventDefault(); togglePlay(); break; case 'ArrowRight': // 快进 5 秒 if (!isNaN(audio.duration)) { audio.currentTime = Math.min(audio.currentTime + 5, audio.duration); } break; case 'ArrowLeft': // 后退 5 秒 audio.currentTime = Math.max(audio.currentTime - 5, 0); break; case 'ArrowUp': // 增加音量 volumeSlider.value = Math.min(parseInt(volumeSlider.value) + 10, 100); setVolume(); break; case 'ArrowDown': // 减小音量 volumeSlider.value = Math.max(parseInt(volumeSlider.value) - 10, 0); setVolume(); break; case 'KeyM': // 静音 toggleMute(); break; case 'KeyR': // 随机播放 toggleRandom(); break; case 'KeyL': // 循环播放 toggleLoop(); break; } } } // 显示按钮反馈 function showButtonFeedback(button, message) { // 创建反馈元素 const feedback = document.createElement('div'); feedback.className = 'button-feedback'; feedback.textContent = message; feedback.style.cssText = ` position: absolute; top: -30px; left: 50%; transform: translateX(-50%); background: rgba(0, 0, 0, 0.7); color: white; padding: 5px 10px; border-radius: 4px; font-size: 0.8rem; white-space: nowrap; pointer-events: none; opacity: 0; transition: opacity 0.2s; `; // 添加到按钮 button.style.position = 'relative'; button.appendChild(feedback); // 显示反馈 setTimeout(() => { feedback.style.opacity = '1'; }, 10); // 移除反馈 setTimeout(() => { feedback.style.opacity = '0'; setTimeout(() => { button.removeChild(feedback); }, 300); }, 1500); } // 初始化 init(); });","author":"彭于晏"},{"title":"游戏","date":"2025-04-15T16:38:19.000Z","updated":"2025-04-16T13:31:37.096Z","comments":false,"path":"game/index.html","permalink":"http://example.com/game/index.html","excerpt":"在线玩游戏！","text":"游戏乐园 放松心情，享受游戏的乐趣 ⚫⚪ 五子棋 经典黑白对弈，五子相连定胜负 开始游戏 ♞♜ 中国象棋 千年国粹，运筹帷幄决胜千里 开始游戏 🎲 魔方 挑战大脑，还原六面立方体 开始游戏 🐉 召唤神龙 集齐七颗龙珠，实现你的愿望 开始游戏 🏃 神庙逃亡 快速奔跑，躲避障碍物，考验反应力 开始游戏 📌 见缝插针 精准投掷，把握时机，挑战你的眼力 开始游戏 🧱 我的世界2D版 像素风格的沙盒游戏，创造属于你的世界 开始游戏 🐔 坤乐盒 鲲鲲同款，只因你太美 开始游戏 🌀 走迷宫 考验智力与耐心，找到迷宫的出口 开始游戏 🎹 钢琴块 节奏游戏，点击黑块，享受音乐 开始游戏 /* 全局动画效果 */ @keyframes float { 0% { transform: translateY(0px); } 50% { transform: translateY(-10px); } 100% { transform: translateY(0px); } } @keyframes pulse { 0% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } 50% { transform: scale(1.03); box-shadow: 0 10px 25px rgba(0, 0, 0, 0.5); } 100% { transform: scale(1); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } } /* 卡片悬停效果 */ .game-card:hover { transform: translateY(-10px); box-shadow: 0 15px 30px rgba(0, 0, 0, 0.4); } .game-card:hover .play-btn { transform: scale(1.05); box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3); } /* 添加霓虹光效果 */ .game-card:hover::before { content: \"\"; position: absolute; top: -3px; left: -3px; right: -3px; bottom: -3px; z-index: -1; background: linear-gradient(45deg, #ff3e9d, #0071ff, #00ff9d, #ff3e9d); background-size: 400% 400%; border-radius: 16px; animation: neon 3s ease infinite; } @keyframes neon { 0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; } } /* 背景动画 */ .header-decoration { animation: float 6s ease-in-out infinite; } window.addEventListener('load', function() { // 添加鼠标跟随效果 const gameContainer = document.querySelector('.game-container'); if (gameContainer) { gameContainer.addEventListener('mousemove', function(e) { const cards = document.querySelectorAll('.game-card'); const mouseX = e.clientX; const mouseY = e.clientY; cards.forEach(card => { const rect = card.getBoundingClientRect(); const cardX = rect.left + rect.width / 2; const cardY = rect.top + rect.height / 2; // 计算鼠标与卡片的距离 const distX = mouseX - cardX; const distY = mouseY - cardY; const distance = Math.sqrt(distX * distX + distY * distY); // 近距离时添加轻微的3D倾斜效果 if (distance < 300) { const rotateY = distX * 0.03; const rotateX = -distY * 0.03; card.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`; } else { card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)'; } }); }); // 鼠标离开时重置所有卡片 gameContainer.addEventListener('mouseleave', function() { const cards = document.querySelectorAll('.game-card'); cards.forEach(card => { card.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)'; }); }); } });","author":"吴彦祖"},{"title":"关于","date":"2025-04-16T11:44:10.990Z","updated":"2025-04-16T11:44:10.990Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"战歌起 您的浏览器不支持音频播放器 Star Sky Two Steps From Hell .music-player { background: linear-gradient(45deg, #3a1c71, #d76d77, #ffaf7b); border-radius: 15px; padding: 20px; margin: 20px 0; box-shadow: 0 10px 20px rgba(0,0,0,0.3); position: relative; overflow: hidden; } .music-player::before { content: \"\"; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: linear-gradient(45deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0) 60%); transform: rotate(45deg); z-index: 1; pointer-events: none; } .player-title { color: white; font-size: 1.5em; margin-bottom: 15px; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); font-weight: bold; text-align: center; } .custom-audio { width: 100%; height: 50px; outline: none; filter: drop-shadow(0 5px 10px rgba(0,0,0,0.2)); display: flex; justify-content: center; margin: 0 auto; } .custom-audio::-webkit-media-controls-panel { background: rgba(255,255,255,0.2); border-radius: 10px; } .custom-audio::-webkit-media-controls-play-button { background-color: rgba(255,255,255,0.8); border-radius: 50%; transform: scale(1.2); } .custom-audio::-webkit-media-controls-enclosure { display: flex; justify-content: center; align-items: center; } .music-info { display: flex; align-items: center; margin-top: 15px; justify-content: center; } .album-art { width: 60px; height: 60px; border-radius: 50%; margin-right: 15px; box-shadow: 0 5px 10px rgba(0,0,0,0.2); animation: rotate 10s linear infinite; } @keyframes rotate { from { transform: rotate(0deg); } to { transform: rotate(360deg); } } .track-info { color: white; } .track-name { font-weight: bold; font-size: 1.1em; margin-bottom: 5px; } .artist { font-size: 0.9em; opacity: 0.8; } .visualizer { display: flex; justify-content: center; align-items: flex-end; height: 30px; margin-top: 10px; } .bar { width: 5px; background: white; margin: 0 2px; border-radius: 5px; animation: visualize 0.8s infinite alternate; } .bar:nth-child(1) { height: 30%; animation-delay: 0.2s; } .bar:nth-child(2) { height: 60%; animation-delay: 0.3s; } .bar:nth-child(3) { height: 80%; animation-delay: 0.4s; } .bar:nth-child(4) { height: 40%; animation-delay: 0.5s; } .bar:nth-child(5) { height: 70%; animation-delay: 0.6s; } .bar:nth-child(6) { height: 50%; animation-delay: 0.7s; } .bar:nth-child(7) { height: 90%; animation-delay: 0.8s; } .bar:nth-child(8) { height: 30%; animation-delay: 0.9s; } @keyframes visualize { from { transform: scaleY(1); } to { transform: scaleY(1.5); } }"},{"title":"网站公告","date":"2025-03-31T16:00:00.000Z","updated":"2025-04-16T11:46:14.660Z","comments":false,"path":"公告/index.html","permalink":"http://example.com/%E5%85%AC%E5%91%8A/index.html","excerpt":"","text":"2025年01月01日 网站公告 网站创建 网站正式创建！我将在这里分享有趣的东西! 感谢访问，希望我的内容能够对您有所帮助！ /* 公告页面样式 */ .announcement-container { max-width: 800px; margin: 0 auto; padding: 20px; } .announcement-header { text-align: center; margin-bottom: 40px; position: relative; } .announcement-title { font-size: 2rem; color: #3498db; display: inline-block; padding-bottom: 10px; position: relative; } .announcement-title:after { content: \"\"; position: absolute; bottom: 0; left: 50%; transform: translateX(-50%); width: 100px; height: 3px; background: linear-gradient(90deg, #3498db, #9b59b6); border-radius: 3px; } .announcement-icon { font-size: 2.5rem; color: #3498db; margin-bottom: 15px; display: block; } .announcement-item { margin-bottom: 40px; padding: 25px; border-radius: 15px; background: white; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.05); transition: all 0.3s ease; border-left: 5px solid #3498db; } .announcement-item:hover { transform: translateY(-5px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1); } .announcement-meta { display: flex; justify-content: space-between; margin-bottom: 15px; padding-bottom: 15px; border-bottom: 1px solid #f0f0f0; } .announcement-date { color: #7f8c8d; font-size: 0.9rem; } .announcement-tag { background: #3498db; color: white; padding: 3px 10px; border-radius: 20px; font-size: 0.8rem; } .announcement-item:nth-child(3) .announcement-tag { background: #9b59b6; } .announcement-item:nth-child(4) .announcement-tag { background: #e74c3c; } .announcement-item:nth-child(5) .announcement-tag { background: #2ecc71; } .announcement-content h3 { color: #2c3e50; margin-bottom: 15px; font-size: 1.4rem; } .announcement-content p { color: #34495e; line-height: 1.7; margin-bottom: 15px; } .announcement-content ul { padding-left: 20px; margin-bottom: 15px; } .announcement-content ul li { color: #34495e; margin-bottom: 8px; position: relative; } .announcement-content ul li:before { content: \"•\"; color: #3498db; font-weight: bold; display: inline-block; width: 1em; margin-left: -1em; } @media (max-width: 768px) { .announcement-meta { flex-direction: column; } .announcement-date { margin-bottom: 10px; } .announcement-tag { align-self: flex-start; } }"},{"title":"博客总结","date":"2023-11-21T16:00:00.000Z","updated":"2025-04-03T06:42:41.991Z","comments":false,"path":"总结/index.html","permalink":"http://example.com/%E6%80%BB%E7%BB%93/index.html","excerpt":"","text":"📄 0 文章总数 📝 0 文章总字数 📁 0 分类总数 🏷️ 0 标签总数 📊 文章发布趋势 月度 年度 📊 分类文章数量 📂 分类统计 0 个分类 加载中... 🏷️ 标签统计 0 个标签 加载中... 🔥 最新文章 加载中... .stat-card { transition: all 0.3s; border-radius: 10px; overflow: hidden; } .stat-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); } .stat-icon { font-size: 2rem; margin-bottom: 10px; color: #0066cc; } #category-list .badge, #tag-list .badge { font-size: 0.9rem; padding: 8px 15px; margin: 0 8px 8px 0; border-radius: 20px; transition: all 0.2s; } #category-list .badge { background-color: rgba(0, 123, 255, 0.1); color: #007bff; border: 1px solid rgba(0, 123, 255, 0.2); } #tag-list .badge { background-color: rgba(23, 162, 184, 0.1); color: #17a2b8; border: 1px solid rgba(23, 162, 184, 0.2); } #category-list .badge:hover, #tag-list .badge:hover { transform: scale(1.05); } #category-list .badge:hover { background-color: #007bff; color: white; } #tag-list .badge:hover { background-color: #17a2b8; color: white; } .card-header { background-color: rgba(0,0,0,0.03); border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-item { display: flex; align-items: center; padding: 15px; border-bottom: 1px solid rgba(0,0,0,0.05); } .popular-post-rank { font-size: 1.5rem; font-weight: bold; margin-right: 15px; color: #dc3545; min-width: 30px; text-align: center; } .popular-post-title { flex-grow: 1; } .popular-post-date { color: #6c757d; font-size: 0.85rem; } .loading-text { color: #6c757d; } /* 简单图表样式 */ .simple-chart { height: 250px; display: flex; align-items: flex-end; padding-top: 20px; } .chart-bar { flex: 1; background-color: #007bff; margin: 0 3px; border-radius: 3px 3px 0 0; position: relative; min-height: 1px; transition: height 0.5s; } .chart-bar-label { position: absolute; top: -20px; left: 0; right: 0; text-align: center; font-size: 11px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; transform: rotate(-45deg); transform-origin: right bottom; } .chart-bar-value { position: absolute; bottom: 5px; left: 0; right: 0; text-align: center; color: white; font-size: 12px; font-weight: bold; } .progress-bar { transition: width 0.5s; } // 避免使用外部库，改用内置fetch API document.addEventListener('DOMContentLoaded', function() { // 缓存机制，减少重复请求 const CACHE_KEY = 'blog_stats_cache'; const CACHE_TIME = 300000; // 修改为5分钟缓存 // 添加强制刷新功能 const urlParams = new URLSearchParams(window.location.search); const forceRefresh = urlParams.get('refresh') === 'true'; // 尝试从缓存获取数据 function getCache() { try { const cache = localStorage.getItem(CACHE_KEY); if (cache && !forceRefresh) { const { data, timestamp } = JSON.parse(cache); if (Date.now() - timestamp < CACHE_TIME) { return data; } } } catch (e) { console.error('读取缓存失败', e); } return null; } // 设置缓存 function setCache(data) { try { localStorage.setItem(CACHE_KEY, JSON.stringify({ data, timestamp: Date.now() })); } catch (e) { console.error('设置缓存失败', e); } } // 添加刷新按钮 const container = document.querySelector('.container'); const refreshButton = document.createElement('div'); refreshButton.className = 'text-center mb-4'; refreshButton.innerHTML = ` 刷新统计数据 `; container.insertBefore(refreshButton, container.firstChild); document.getElementById('refresh-stats').addEventListener('click', function() { window.location.href = window.location.pathname + '?refresh=true'; }); // 先检查是否有缓存 const cachedData = getCache(); if (cachedData) { processData(cachedData); return; } // 无缓存，从服务器获取 fetch('/content.json') .then(response => response.json()) .then(data => { // 缓存数据 setCache(data); processData(data); }) .catch(error => { console.error('获取博客数据失败:', error); document.querySelector('.container').innerHTML = '获取博客数据失败，请确保已安装 hexo-generator-json-content 插件'; }); function processData(data) { // 移除加载提示 document.querySelectorAll('.loading-text').forEach(element => { element.parentElement.innerHTML = ''; }); // 文章总数 const postCount = data.posts.length; document.getElementById('post-count').textContent = postCount; // 计算总字数 let wordCount = 0; data.posts.forEach(post => { if (post.text) { wordCount += post.text.length; } }); // 格式化字数显示 let formattedWordCount; if (wordCount > 1000000) { formattedWordCount = (wordCount / 1000000).toFixed(1) + 'M'; } else if (wordCount > 10000) { formattedWordCount = (wordCount / 10000).toFixed(1) + '万'; } else if (wordCount > 1000) { formattedWordCount = (wordCount / 1000).toFixed(1) + 'k'; } else { formattedWordCount = wordCount; } document.getElementById('word-count').textContent = formattedWordCount; // 获取所有分类 const categories = {}; data.posts.forEach(post => { if (post.categories) { post.categories.forEach(category => { if (categories[category.name]) { categories[category.name]++; } else { categories[category.name] = 1; } }); } }); // 显示分类数量 const categoryCount = Object.keys(categories).length; document.getElementById('category-count').textContent = categoryCount; document.getElementById('category-total').textContent = categoryCount + ' 个分类'; // 显示分类列表 const categoryList = document.getElementById('category-list'); const sortedCategories = Object.entries(categories).sort((a, b) => b[1] - a[1]); sortedCategories.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/categories/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; categoryList.appendChild(badge); }); // 获取所有标签 const tags = {}; data.posts.forEach(post => { if (post.tags) { post.tags.forEach(tag => { if (tags[tag.name]) { tags[tag.name]++; } else { tags[tag.name] = 1; } }); } }); // 显示标签数量 const tagCount = Object.keys(tags).length; document.getElementById('tag-count').textContent = tagCount; document.getElementById('tag-total').textContent = tagCount + ' 个标签'; // 显示标签列表 const tagList = document.getElementById('tag-list'); const sortedTags = Object.entries(tags).sort((a, b) => b[1] - a[1]); sortedTags.forEach(([name, count]) => { const badge = document.createElement('a'); badge.href = '/tags/' + name + '/'; badge.className = 'badge mr-2 mb-2'; badge.textContent = `${name} (${count})`; tagList.appendChild(badge); }); // 按日期对文章进行分组 const postsByMonth = {}; const postsByYear = {}; data.posts.forEach(post => { if (post.date) { const date = new Date(post.date); const year = date.getFullYear(); const month = date.getMonth(); // 按月分组 const monthKey = `${year}-${month+1}`; if (postsByMonth[monthKey]) { postsByMonth[monthKey]++; } else { postsByMonth[monthKey] = 1; } // 按年分组 if (postsByYear[year]) { postsByYear[year]++; } else { postsByYear[year] = 1; } } }); // 创建文章发布统计图表 - 使用简单的DIV实现 const monthLabels = []; const monthData = []; // 获取最近12个月的数据 const now = new Date(); for (let i = 11; i >= 0; i--) { const month = new Date(now.getFullYear(), now.getMonth() - i, 1); const year = month.getFullYear(); const monthNum = month.getMonth() + 1; const monthKey = `${year}-${monthNum}`; const monthName = `${year}/${monthNum}`; monthLabels.push(monthName); monthData.push(postsByMonth[monthKey] || 0); } const yearLabels = Object.keys(postsByYear).sort(); const yearData = yearLabels.map(year => postsByYear[year]); // 创建简单的柱状图 renderSimpleBarChart('post-chart', monthLabels, monthData); // 切换年度/月度按钮事件 document.getElementById('month-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('year-btn').classList.remove('active'); renderSimpleBarChart('post-chart', monthLabels, monthData); }); document.getElementById('year-btn').addEventListener('click', function() { this.classList.add('active'); document.getElementById('month-btn').classList.remove('active'); renderSimpleBarChart('post-chart', yearLabels, yearData); }); // 创建分类统计图表 const topCategories = sortedCategories.slice(0, 8); const categoryChartLabels = topCategories.map(item => item[0]); const categoryChartData = topCategories.map(item => item[1]); renderSimpleBarChart('category-chart', categoryChartLabels, categoryChartData, [ '#FF9999', '#99CCFF', '#FFCC99', '#99FF99', '#CC99FF', '#FFFF99', '#FF99CC', '#99FFCC' ]); // 热门文章展示（这里以日期最新的5篇作为演示） const popularPosts = [...data.posts].sort((a, b) => { return new Date(b.date) - new Date(a.date); }).slice(0, 5); const popularPostsContainer = document.getElementById('popular-posts'); popularPostsContainer.innerHTML = ''; popularPosts.forEach((post, index) => { const postDate = new Date(post.date); const formattedDate = `${postDate.getFullYear()}-${postDate.getMonth()+1}-${postDate.getDate()}`; const postItem = document.createElement('a'); // 修复文章链接路径，确保以斜杠开头 postItem.href = post.path.startsWith('/') ? post.path : '/' + post.path; postItem.className = 'list-group-item list-group-item-action popular-post-item'; postItem.innerHTML = ` ${index+1} ${post.title} ${formattedDate} `; popularPostsContainer.appendChild(postItem); }); } // 渲染简单的柱状图，不依赖外部库 function renderSimpleBarChart(containerId, labels, data, colors) { const container = document.getElementById(containerId); container.innerHTML = ''; // 找出最大值 const maxValue = Math.max(...data); // 创建柱状图 data.forEach((value, index) => { const bar = document.createElement('div'); bar.className = 'chart-bar'; // 根据数值设置高度百分比 const heightPercent = maxValue > 0 ? (value / maxValue * 100) : 0; bar.style.height = heightPercent + '%'; // 如果有自定义颜色，则使用 if (colors && colors[index]) { bar.style.backgroundColor = colors[index]; } // 添加标签 const label = document.createElement('div'); label.className = 'chart-bar-label'; label.textContent = labels[index]; bar.appendChild(label); // 添加数值 if (value > 0) { const valueDiv = document.createElement('div'); valueDiv.className = 'chart-bar-value'; valueDiv.textContent = value; bar.appendChild(valueDiv); } container.appendChild(bar); }); } });"},{"title":"放映厅","date":"2025-04-16T13:36:02.000Z","updated":"2025-04-17T03:10:48.278Z","comments":false,"path":"放映厅/index.html","permalink":"http://example.com/%E6%94%BE%E6%98%A0%E5%8E%85/index.html","excerpt":"","text":"🎬 沙子坑影院 🎲 随机震撼体验 💡 关灯模式 🏃 1号厅：箱根驿传，风驰电掣 ▼ 1 2 3 4 5 🌏 2号厅：异域风情，彼岸之息 ▼ 1 2 3 ⚔️ 3号厅：超燃战斗，电光石火 ▼ 1 2 3 🌈 6号厅：享你所想 ▼ 🦊 茶杯狐 片荒剧荒速来 点击访问 🎬 fofo影院 免费在线看电影 点击访问 ✨ 星辰影院 免费在线看电影 点击访问 /* 动态背景 */ .dynamic-bg { position: fixed; top: 0; left: 0; width: 100%; height: 100%; z-index: 0; pointer-events: none; overflow: hidden; } .star { position: absolute; background: rgba(255, 255, 255, 0.5); border-radius: 50%; filter: blur(1px); animation: twinkle 7s infinite cubic-bezier(0.45, 0.05, 0.55, 0.95); } .star1 { width: 2px; height: 2px; top: 10%; left: 20%; animation-delay: 0s; } .star2 { width: 3px; height: 3px; top: 30%; left: 85%; animation-delay: 1s; } .star3 { width: 2px; height: 2px; top: 70%; left: 40%; animation-delay: 1.5s; } .star4 { width: 4px; height: 4px; top: 40%; left: 10%; animation-delay: 2s; } .star5 { width: 3px; height: 3px; top: 80%; left: 80%; animation-delay: 2.5s; } .star6 { width: 2px; height: 2px; top: 20%; left: 60%; animation-delay: 3s; } .star7 { width: 3px; height: 3px; top: 60%; left: 15%; animation-delay: 3.5s; } .star8 { width: 2px; height: 2px; top: 50%; left: 75%; animation-delay: 4s; } @keyframes twinkle { 0%, 100% { opacity: 0.2; transform: scale(1); } 50% { opacity: 1; transform: scale(1.5); } } .cinema-container { position: relative; z-index: 1; transition: background 0.8s cubic-bezier(0.22, 1, 0.36, 1); } /* 关灯模式 */ .lights-off .dynamic-bg .star { opacity: 1; filter: blur(1px); } .lights-off { background: rgba(5, 5, 15, 0.95) !important; } .lights-off .theater-section, .lights-off .theater-header { background: rgba(0, 0, 0, 0.7) !important; } .lights-off .cinema-header h1 { opacity: 0.7; } .lights-off .header-decoration, .lights-off .random-button, .lights-off .toggle-icon, .lights-off .theater-control { opacity: 0.5; } .lights-off .theater-content:not(.active-theater) { opacity: 0.3; } .lights-off .active-theater { box-shadow: 0 0 50px rgba(255, 255, 255, 0.1) !important; } /* 站点卡片悬停效果 */ .site-card:hover { transform: translateY(-10px); box-shadow: 0 15px 35px rgba(0, 0, 0, 0.5); } .site-card:hover .site-hover-effect { opacity: 1; } /* 动画效果 */ @keyframes glow { 0% { box-shadow: 0 0 15px rgba(255, 255, 255, 0.3); } 50% { box-shadow: 0 0 30px rgba(255, 255, 255, 0.5); } 100% { box-shadow: 0 0 15px rgba(255, 255, 255, 0.3); } } @keyframes pulse { 0% { transform: scale(1); } 50% { transform: scale(1.05); } 100% { transform: scale(1); } } @keyframes slideDown { from { opacity: 0; transform: translateY(-15px); } to { opacity: 1; transform: translateY(0); } } @keyframes float { 0% { transform: translateY(0px); } 50% { transform: translateY(-8px); } 100% { transform: translateY(0px); } } .theater-section { transition: all 0.7s cubic-bezier(0.34, 1.56, 0.64, 1); position: relative; overflow: hidden; } .theater-section::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(45deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0) 100%); pointer-events: none; } .theater-section:hover { transform: translateY(-8px); box-shadow: 0 20px 50px rgba(0, 0, 0, 0.8); } .random-button button { position: relative; overflow: hidden; transition: all 0.6s cubic-bezier(0.22, 1, 0.36, 1); } .random-button button::after { content: ''; position: absolute; top: -50%; left: -50%; width: 200%; height: 200%; background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, rgba(255,255,255,0) 70%); opacity: 0; pointer-events: none; transition: opacity 0.8s ease; } .random-button button:hover { transform: translateY(-5px); box-shadow: 0 10px 25px rgba(255, 77, 141, 0.7); animation: pulse 2.2s infinite cubic-bezier(0.45, 0.05, 0.55, 0.95); } .random-button button:hover::after { opacity: 1; animation: float 4s infinite cubic-bezier(0.45, 0.05, 0.55, 0.95); } .theater-header { transition: all 0.5s cubic-bezier(0.22, 1, 0.36, 1); position: relative; overflow: hidden; } .theater-header::after { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.2) 50%, rgba(255,255,255,0) 100%); transition: all 1.2s cubic-bezier(0.22, 1, 0.36, 1); pointer-events: none; } .theater-header:hover { filter: brightness(1.3); } .theater-header:hover::after { left: 100%; } .toggle-icon { transition: transform 0.6s cubic-bezier(0.34, 1.56, 0.64, 1); } .theater-header.active .toggle-icon { transform: rotate(180deg); } .theater-content { animation: slideDown 0.7s cubic-bezier(0.22, 1, 0.36, 1) forwards; } .control-button { transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1) !important; } .control-button:hover { background: rgba(255,255,255,0.4) !important; transform: scale(1.1); } .site-card { transition: all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1) !important; } /* 响应式设计 */ @media (max-width: 992px) { .cinema-container { padding: 20px; } .cinema-header h1 { font-size: 2.5em; } .theater-content iframe { height: 500px; } .theater-header h2 { font-size: 1.5em; } } @media (max-width: 768px) { .cinema-container { padding: 15px; } .cinema-header h1 { font-size: 2em; } .theater-content iframe { height: 350px; } .theater-control { position: relative !important; top: 0 !important; right: 0 !important; margin-bottom: 15px; justify-content: center; } .theater-header h2 { font-size: 1.2em; } .theater-header h2 span { width: 36px !important; height: 36px !important; } } // 视频BV号列表 const hakoneVideos = [ 'BV1Wwd9YqE1i', // 箱根驿传1 'BV1NBwVeGEyJ', // 箱根驿传2 'BV14D4y1F7cg', // 箱根驿传3 'BV1b5411z7vC', // 箱根驿传4 'BV1Kb421Y7vb' // 箱根驿传5 ]; const exoticVideos = [ 'BV1pK411u7y6', // 异域风情1 'BV1gM4y117zU', // 异域风情2 'BV1Yp4y1W7u3' // 异域风情3 ]; const battleVideos = [ 'BV1wx411e71v', // 超燃战斗1 'BV1Qs411e7SN', // 超燃战斗2 'BV1Em4y1H7To' // 超燃战斗3 ]; // 所有视频的集合，用于随机播放 const allVideos = [...hakoneVideos, ...exoticVideos, ...battleVideos]; // 影院与视频列表的映射 const theaterVideoMap = { 'hakone-theater': hakoneVideos, 'exotic-theater': exoticVideos, 'battle-theater': battleVideos }; // 影院与iframe ID的映射 const theaterIframeMap = { 'hakone-theater': 'hakone-iframe', 'exotic-theater': 'exotic-iframe', 'battle-theater': 'battle-iframe' }; // 更改特定影院的视频 function changeVideo(theaterId, index) { const videos = theaterVideoMap[theaterId]; const iframeId = theaterIframeMap[theaterId]; if (index >= 0 && index < videos.length) { const iframe = document.getElementById(iframeId); iframe.src = `//player.bilibili.com/player.html?bvid=${videos[index]}&p=1`; // 高亮选中的按钮 const buttons = document.querySelectorAll(`#${theaterId} .control-button`); buttons.forEach((btn, i) => { if (i === index) { btn.style.background = 'rgba(255,255,255,0.4)'; btn.style.transform = 'scale(1.1)'; } else { btn.style.background = 'rgba(255,255,255,0.2)'; btn.style.transform = 'scale(1)'; } }); showNotification(`正在播放 ${getVideoTitle(theaterId, index)}`); } } // 获取视频标题 function getVideoTitle(theaterId, index) { const theaterTitles = { 'hakone-theater': [ '箱根驿传 第一集', '箱根驿传 第二集', '箱根驿传 第三集', '箱根驿传 第四集', '箱根驿传 第五集' ], 'exotic-theater': [ '异域风情 第一集', '异域风情 第二集', '异域风情 第三集' ], 'battle-theater': [ '超燃战斗 第一集', '超燃战斗 第二集', '超燃战斗 第三集' ] }; return theaterTitles[theaterId][index]; } // 随机播放视频函数 function playRandomVideo() { // 随机选择一个BV号 const randomIndex = Math.floor(Math.random() * allVideos.length); const randomBvid = allVideos[randomIndex]; // 确定该视频属于哪个影院 let targetTheater = ''; let videoIndex = -1; if (hakoneVideos.includes(randomBvid)) { targetTheater = 'hakone-theater'; videoIndex = hakoneVideos.indexOf(randomBvid); } else if (exoticVideos.includes(randomBvid)) { targetTheater = 'exotic-theater'; videoIndex = exoticVideos.indexOf(randomBvid); } else if (battleVideos.includes(randomBvid)) { targetTheater = 'battle-theater'; videoIndex = battleVideos.indexOf(randomBvid); } // 关闭所有影院 const theaters = document.querySelectorAll('.theater-content'); theaters.forEach(theater => { theater.style.display = 'none'; }); // 移除所有header的active类 const headers = document.querySelectorAll('.theater-header'); headers.forEach(header => { header.classList.remove('active'); }); // 打开目标影院 const targetTheaterElement = document.getElementById(targetTheater); targetTheaterElement.style.display = 'block'; // 添加active类 const header = targetTheaterElement.previousElementSibling; header.classList.add('active'); // 播放选中的视频 changeVideo(targetTheater, videoIndex); // 滚动到影院位置 targetTheaterElement.scrollIntoView({ behavior: 'smooth', block: 'center' }); // 显示随机播放提示 showNotification('随机播放中，震撼体验即将开始...'); } // 显示提示消息 function showNotification(message) { // 检查是否已存在通知元素 let notification = document.getElementById('notification'); if (!notification) { // 创建通知元素 notification = document.createElement('div'); notification.id = 'notification'; notification.style.position = 'fixed'; notification.style.bottom = '30px'; notification.style.left = '50%'; notification.style.transform = 'translateX(-50%)'; notification.style.backgroundColor = 'rgba(0, 0, 0, 0.85)'; notification.style.color = 'white'; notification.style.padding = '15px 30px'; notification.style.borderRadius = '50px'; notification.style.zIndex = '1000'; notification.style.boxShadow = '0 5px 25px rgba(0, 0, 0, 0.5)'; notification.style.opacity = '0'; notification.style.transition = 'opacity 0.3s ease'; notification.style.fontSize = '16px'; notification.style.fontWeight = 'bold'; document.body.appendChild(notification); } // 更新消息并显示 notification.textContent = message; notification.style.opacity = '1'; // 3秒后隐藏 setTimeout(() => { notification.style.opacity = '0'; }, 3000); } function toggleTheater(theaterId) { const content = document.getElementById(theaterId); const header = content.previousElementSibling; // 切换显示状态 if (content.style.display === 'none') { // 关闭所有其他影院 const theaters = document.querySelectorAll('.theater-content'); theaters.forEach(theater => { if (theater.id !== theaterId) { theater.style.display = 'none'; theater.previousElementSibling.classList.remove('active'); } }); content.style.display = 'block'; header.classList.add('active'); // 添加展开动画 content.style.animation = 'slideDown 0.5s ease forwards'; // 在关灯模式下标记当前活跃的影院 if (document.querySelector('.cinema-container').classList.contains('lights-off')) { // 移除所有活跃影院标记 document.querySelectorAll('.theater-content').forEach(theater => { theater.classList.remove('active-theater'); }); // 添加当前影院活跃标记 content.classList.add('active-theater'); } // 如果有控制按钮，默认高亮第一个 const firstButton = content.querySelector('.control-button'); if (firstButton) { firstButton.style.background = 'rgba(255,255,255,0.4)'; firstButton.style.transform = 'scale(1.1)'; } } else { content.style.display = 'none'; header.classList.remove('active'); content.classList.remove('active-theater'); } } // 关灯功能 function toggleLights() { const container = document.querySelector('.cinema-container'); const button = document.getElementById('lightToggle'); if (container.classList.contains('lights-off')) { // 开灯 container.classList.remove('lights-off'); button.innerHTML = '💡 关灯模式'; button.style.background = 'linear-gradient(90deg, #6a11cb, #2575fc)'; } else { // 关灯 container.classList.add('lights-off'); button.innerHTML = '🔆 开灯模式'; button.style.background = 'linear-gradient(90deg, #ff9966, #ff5e62)'; // 标记当前打开的影院为活跃 document.querySelectorAll('.theater-content').forEach(theater => { if (theater.style.display === 'block') { theater.classList.add('active-theater'); } }); } } // 页面加载完成后的初始化 document.addEventListener('DOMContentLoaded', function() { // 默认展开第一个影院 setTimeout(() => { toggleTheater('hakone-theater'); }, 800); // 添加展开/收起动画 const headers = document.querySelectorAll('.theater-header'); headers.forEach(header => { header.addEventListener('click', function() { this.classList.toggle('active'); }); }); // 给所有控制按钮添加悬停效果 const controlButtons = document.querySelectorAll('.control-button'); controlButtons.forEach(button => { button.addEventListener('mouseover', function() { if (this.style.transform !== 'scale(1.1)') { this.style.background = 'rgba(255,255,255,0.3)'; } }); button.addEventListener('mouseout', function() { if (this.style.transform !== 'scale(1.1)') { this.style.background = 'rgba(255,255,255,0.2)'; } }); }); // 站点卡片添加脉冲动画 const siteCards = document.querySelectorAll('.site-card'); let currentCardIndex = 0; function animateSiteCard() { // 移除之前的动画 siteCards.forEach(card => { card.style.animation = ''; }); // 添加新动画 if(siteCards.length > 0) { siteCards[currentCardIndex].style.animation = 'pulse 3s cubic-bezier(0.45, 0.05, 0.55, 0.95)'; // 更新索引 currentCardIndex = (currentCardIndex + 1) % siteCards.length; // 设置下一个动画 setTimeout(animateSiteCard, 4000); } } // 初始动画 setTimeout(animateSiteCard, 3000); // 添加星星闪烁动画增强 function enhanceStars() { const stars = document.querySelectorAll('.star'); stars.forEach((star, index) => { // 随机调整位置 const randomTop = Math.random() * 100; const randomLeft = Math.random() * 100; setTimeout(() => { star.style.transition = 'top 15s cubic-bezier(0.34, 0.82, 0.6, 1), left 15s cubic-bezier(0.34, 0.82, 0.6, 1)'; star.style.top = `${randomTop}%`; star.style.left = `${randomLeft}%`; }, index * 300); }); // 定期调整星星位置 setTimeout(enhanceStars, 15000); } // 初始化星星动画 setTimeout(enhanceStars, 2000); });","author":"彭于晏"}],"posts":[{"title":"test","slug":"test","date":"2025-04-16T13:33:45.000Z","updated":"2025-04-16T13:33:45.173Z","comments":true,"path":"2025/04/16/test/","permalink":"http://example.com/2025/04/16/test/","excerpt":"","text":"","categories":[],"tags":[]}],"categories":[],"tags":[]}